.. 自主飞行之入门:

==========================
自主飞行之入门
==========================

1.ROS
========

ROS官网: `维基 <http://wiki.ros.org/>`__ 

ROS是用于开发复杂的分布式机器人系统的广泛使用的框架.

a. 安装
^^^^^^^^^^

主要参考: `官网安装说明 <http://wiki.ros.org/kinetic/Installation/Ubuntu>`__

在飞机上的机载计算机TX2上已经安装好了ROS.

如果要在PC上面使用ROS,我们建议使用Ubuntu Linux系统.Windows系统下面可以使用VMware虚拟机,Mac系统可以使用 **VirtualBox** 或者是 **Parallels Desktop Lite**

.. tip::

    我们建议使用Ubuntu16.04与之相对应的ROS版本Kinetic.

b.基本概念
^^^^^^^^^^^^^^^

**节点(nodes):**

主要参考来源: `ROS节点 <http://wiki.ros.org/Nodes>`__

ROS节点是一个特殊的程序,通常使用Python或者C++编写,可以通过ROS主题和ROS服务与其他节点进行通信.将复杂的机器人系统划分为孤立的节点具有某些优点:减少代码的耦合性,提高可重用性和可靠性

许多机器人库和驱动程序都是以ROS节点的形式执行.

为了将普通程序变成ROS节点,请包含rospy或roscpp库,并插入初始化代码.


2.MAVROS
==========

3.px4_command介绍
====================

px4_command功能包是一个基于PX4开源固件及Mavros功能包的开源项目，旨在为PX4开发者提供更加简洁快速的开发体验。
目前已集成无人机外环控制器修改、目标追踪、激光SLAM定位、双目V-SLAM定位、激光避障等上层开发代码、后续将陆续推
出涵盖任务决策、路径规划、滤波导航、单/多机控制等无人机/无人车/无人船科研及开发领域的功能。
配合板载计算机(树莓派、TX2、Nano)等运算能力比较强的处理器，来实现复杂算法的运行，运行得到的控制指令通过串口或者网口通信发送给底层控制板。

.. image:: ../images/framework.png

-   **state_from_mavros.h**:订阅飞控状态,包括无人机当前的状态(/mavros/state),当前位置(/mavros/local_position/pose),当前速度(/mavros/local_position/velocity_local),和当前角度,角速度(/mavros/imu/data)
-   **command_to_mavros.h**:发布px4_command功能包生成的控制量至mavros功能包,可发送期望位置,速度(本地系与机体系),角度,角速度,底层控制(遥控器输入)
-   **px4_pos_estimator.cpp**:订阅激光雷达或者mocap发布的位置信息,并进行坐标转换,在state_from_mavros.h中已订阅飞控发布的位置,速度,欧拉角信息,此处直接使用,根据订阅的数据,发布相应的位置,偏航角给飞控
-   **px4_pos_controller.cpp**:订阅由位置估计发布的DroneState,初始化当前飞机状态的时间.订阅ControlCommand(不知从何发布的数据).发布topic_for_log主题.在选择控制率,检查参数正确后,初始化完成.对move节点中,takeoff,Move_ENU,Move_Body,Hold,Land,Disarm,PPN_land和Trajectory_Tracking等进行逻辑处理.
-   **ground_station.cpp**:订阅自定义日志主题(/px4_command/topic_for_log),订阅视觉系统位置估计PoseStamped主题(/vrpn_client_node/UAV/pose,非mavlink消息,数据包括point位置(x,y,z),四元数方向(w,x,y,z)),订阅飞控姿态四元数AttitudeTarget主题(/mavros/setpoint_raw/target_attitude,#82号mavlink消息).不断的更新视觉传感器状态,并打印当前飞机的状态.
-   **px4_sender.cpp**:订阅自定义消息控制指令主题(/px4_command/control_command),机体系到惯性系坐标转换,move中控制命令的具体实现(0表示位置控制,3表示速度控制)
-   **autonomous_landing.cpp**:降落识别使用xyz均为速度控制.订阅数据包括降落板与无人机的相对位置,降落板与无人机的相对偏航角,视觉flag 来自视觉节点.最后发布位置控制指令
-   **collisiom_avoidance_streo.cpp**:订阅/streo_distance该数据作为计算飞机四个方向的距离判断.
-   **formation_control_sitl.cpp**:多机仿真SITL,只适用于Move_ENU坐标系下,若使用Move_Body,需自行添加修改.
-   **payload_drop.cpp**:订阅/mavros/local_position/pose本地位置.发布遥控器通道值.
-   **square.cpp**:发布/px4_command/control_command命令.子模式xyz均为位置控制.
-   **target_tracking.cpp**:
-   **move.cpp**:发布/px4_command/control_command,并设置子模式xy速度控制(0b10),位置控制.z速度控制(0b01),位置控制
-   **set_mode.cpp**:模拟遥控器,根据mavros服务,进行在SITL下解锁,切换offboard,控制飞行器.
-   **TFmini.cpp**:激光定高雷达的处理,如果需要添加超声波传感器,可参考此代码.

4.飞行前准备
===============

远程连接TX2与QGC
^^^^^^^^^^^^^^^^^^^^^^^

需要的硬件:

-   1. 有HDMI接口的显示器一台(用于显示TX2，TX2连接你准备好的路由器的WiFi)
-   2. 带宽比较好的路由器一台
-   3. 安装有QGC地面站与NoMachine电脑一台或两台

连接TX2与QGC:

-   根据WiFi-LINK配置模式有两种连接方式：

WIFI-LINK配置成无线AP模式
"""""""""""""""""""""""""""""""

.. image:: ../images/XBEE_AP_mode.png

这是我们发货时的默认配置，其中WiFi-LINK模块相当与一个热点，笔记本2要连接这个热点进而连接QGC，连接方法可参照 WIFI数传配置无线网卡模式连接路由器.md中第二章第三节。

WiFi-LINK配置成无线网卡模式
""""""""""""""""""""""""""""""""

.. image:: ../images/XBEE_WLAN_mode.png

.. tip::

    WiFi数传的配置工具请在百度网盘自主下载
    `网盘链接 <https://pan.baidu.com/s/1t1zp2y1ikBSsJC8DNLjY_g>`_
    
    提取码: **exk3**

**路由器设置**

如图为 无线WiFi路由器默认IP地址为192.168.10.1，
登录到此路由器的后台，用已连接此WiFi的手机或电脑
登陆地址wifi.wavlink.com（默认密码为admin）。

WIFI设置：设置WiFi的名称（此名称会在数传设置中用到）
加密方式选择WPA2-PSK

.. image:: ../images/WLAN_picture.jpg

.. image:: ../images/WIFI_setting.png

**WiFi数传设置**

-   硬件连接

.. image:: ../images/WIFI_USB_TTL.png

.. image:: ../images/WIFI_connect_computer.png

可用四根杜邦线连接usb转TTL与WiFi-LINK，下图是线序

.. image:: ../images/WIFI_USB_TTL_connect.jpg

-   软件配置

打开配置软件RM08K config tool CN V2.1.exe

.. image:: ../images/WIFI_RM08K_config.png

选择相应的COM口使用一个细长的金属棒或者牙签点击WiFi数传
模块的reset按钮（模块上远离天线的那个孔），然后点击搜索
模块按钮，软件显示如下（Found Device at COMX(57600)）
说明连接成功。

.. image:: ../images/WIFI_RM08K_serch_uart.png

然后下图所示配置你们的WiFi数传，其中网关要选择你的路由器
的网段，网络名称及密码设置你的WiFi路由器的名称与密码，
其中加密方式选择WPA2_AES。

设置完成后点击提交配置即可。

接下来测试是否配置成功：重启WiFi数传，假设你配置成功，
那么WiFi数传会自动连接WiFi路由器。那么我们用连接此
WiFi路由器的笔记本，打开终端(cmd)，输入ping 192.168.10.105 
尝试ping一下我们的WiFi数传，ping通了，那么恭喜你搞定了，
ping不通那么你需要打开 RM08K config tool CN V2.1.exe 
重新配置一下，可以点击查询配置，看看配置的是否有出入。

.. image:: ../images/WIFI_RM08K_set_success.png

**地面站以及NoMachine设置**

-   地面站连接:此步骤需要笔记本连接WiFi路由器的后才可进行，而且你已经在笔记本上ping通了WiFi数传。

打开QGC，如下图操作。 

.. image:: ../images/WIFI_open_qgc.png

然后选择TCP类型，名称任意，主机地址为你设置得到wifi数传
的IP地址，端口为6000，然后确定即可。

.. image:: ../images/WIFI_qgc_setting.png

点击你的配置名称，然后点击连接，即可连接飞控了。

.. image:: ../images/WIFI_qgc_connect.png

-   NoMachine配置:此步骤需要英伟达TX2中的Ubuntu系统连接成功WiFi路由器，并在终端上输入ifconfig命令找到TX2的IP（我的TX2 IP为192.168.10.140）。

打开NOMACHINA软件，点击 New新建

.. image:: ../images/WIFI_nomachine_create_new.png

Protrocol选择NX模式，然后输入TX2的IP地址192.168.10.140，Port默认4000

.. image:: ../images/WIFI_nomachine_input_ip.png

下一步，鉴定方式选择Password，下一步选择Do not use proxy，最后Done

如下选择刚才配置的参数，点击连接

.. image:: ../images/WIFI_nomachine_connect.png

成功后点击YES

输入TX2的用户名以及密码 然后一路OK即可进行访问。

.. image:: ../images/WIFI_nomachine_username&passwd.png

.. image:: ../images/WIFI_nomachine_connect_success.png


飞行环境说明
^^^^^^^^^^^^^^

5.飞行模式说明
==================


室内飞行
^^^^^^^^^^^^^


激光SLAM
"""""""""""

**NANO**

**TX2**

室内我们采用的激光雷达进行定位，因为采用的二维雷达，会在室内构建出如下的平面地图

.. image:: ../images/LIDAR_layout.jpg

所以在测试以前要选择一个房间大小合适(A1/A2雷达半径12米有效，A3雷达半径25米有效)，房间不能地形非常复杂，也不能没有角点和几何特征点，否则不能很好的构建出地图，就不能很好的定位。

我们的测试环境如下：

.. image:: ../images/Indoor_test_site.jpg

房间内有一些防护装置，房顶的防护网，地面的保护垫等等最好具备，防止伤人和损坏飞机。

视觉SLAM
""""""""""""""""

**NANO**

**TX2**


经过上一节假设你已经成功连接上了QGC以及板载计算机了，若遇到困难请上论坛求助： `阿木社区论坛 <http://bbs.amovauto.com/>`_

室内激光雷达定位模式

-   EKF2_AID_MASK = 24 （选择位置以及偏航来源） ； EKF2_HGT_MODE = Vision（选择高度来源）   
-   限制飞机在position模式下的速度以及倾角 ：MPC_TILTMAX_AIR=8、MPC_XY_VEL_MAX=1、MPC_ZVEL_MAX_UP=1

参数确定后尝试解锁，遇到解锁不成功，看看提示是否需要重新校准磁罗盘？解锁成功，电机启转，这时切记不要上浆试飞，
因为此时激光雷达没有工作，没有给飞控送入位置以及高度信息，所以此时姿态控制失效，飞机一飞就会偏。这是我们固件
的bug，近期会修复，请注意。


把飞机放在室内待起飞点，远程已连接好板载计算机与飞控。

在板载计算机系统里打开终端进入如下图所示目录并启动脚本：

::

    ./my_lidar_imu_fly.sh

脚本会依次启动各个launch文件

正常情况下各个窗口会正常工作，其中有个 **px4_pos_estimate** 节点要特别注意，如下图。

.. image:: ../images/indoor_px4_pos_estimate_failed.png

当出现上述问题，需重新启动飞控以及脚本,飞控的重启需要在地面站的控制台上，输入 **reboot** 然后回车即可。

.. image:: ../images/qgc_reboot_vehicle.png

室外飞行
^^^^^^^^^^^^^^

视觉SLAM
"""""""""""""

室外开阔地带GPS搜星良好。

.. note::

    key：室外如果要测试圆跟踪或其他的需要用到板载计算机的功能，那么你需要
    根据 **远程连接板载计算机与QGC** 那一节准备就序，当然如果你只是想
    测试飞机的姿态或定位，那你只需要一个遥控器即可，不过需要修改下节中
    PX4的若干参数。

GPS/RTK
""""""""""""""""""""""""""

-   源PX4参数调整：EKF2_AID_MASK = 1（选择位置以及偏航来源）； EKF2_HGT_MODE = Barometric pressure（选择高度来）
-   脚本修改：因为室外飞行我们不需要激光雷达和tfmini来定位定高，所以把相关的节点关闭即可。

.. image:: ../images/outdoor_circle_tracking_modify_sh.png



室内遥控position(定点)模式飞行

启动脚本如下:

::

    ./my_lidar_imu_fly.sh

.. image:: ../images/FS-i6s.jpg

解锁后遥控器切到Position模式，油推到中位值以上，飞机就会起飞。

室内offboard(板外)模式走四边形

确保 **px4_pos_estimate** 节点的数据正确。

在如下路径中启动脚本:

::

    ./my_square_imu.sh

.. image:: ../images/indoor_my_square_imu.png

然后在 **px4_pos_controller** 节点中确定参数

.. image:: ../images/indoor_confirm_pos_controller.png

最后确定并开始走四边形

.. image:: ../images/indoor_enable_square_node.png

.. warning::

    走四边形之前要确保室内Position模式飞机能够定住，因为飞行环境不同
    ，走四边形的过程中，飞机可能会发散，所以要时刻准备切回`Onboard`

室外offboard(板外)模式跟踪圆

根据上一章 **飞行准备** 中的 **室外飞行** 准备就绪.需要准备一个大小
有要求的圆一个

.. image:: ../images/outdoor_circle_tracking_picture.png

以防万一，安全绳若干米，栓在飞机腿上。

脚本修改与启动

复制脚本 **circle_tracking.sh** 改名为 **circle_trancking_outdoor.sh**

修改内容如下图:

.. image:: ../images/outdoor_circle_tracking_modify_sh.png

然后启动脚本,

::

    ./circle_trancking_outdoor.sh

.. image:: ../images/outdoor_circle_tracking_confirm_pos_controller.png

然后运行

::

    rqt_image_view

查看圆检测是否正常。

.. image:: ../images/outdoor_circle_tracking_detection_circle_.png

最后

.. image:: ../images/outdoor_circle_tracking_enable_node.png

.. note::

    其实室内也可以进行圆的跟踪，但是因为是激光雷达给的位置信息，
    所有不确定因素比较多，测试时要小心。

.. warning::

    1. 飞机上电(电池采用4S电池，满点电压为16.8V,电池空电电压为14.4V)，飞机低于14.4V
    必须充电，飞机上的电压指示等灭了必须充电。同时系统欠缺电压的化(低于14.4V)，电压监测
    模块会报警，滴.滴.滴的声音！切记这时候要给飞机充电，否则会损坏电池。

    .. image:: ../images/LowBattery_warning.jpg

    2.在室内飞行时tfmini定高模块原理是激光的发射与接收，所以飞行时，不能让tfmini照到
    能够反射光的地板上。如果你不能确定，你可以查看如下图`tfmini.launch`的节点，
    然后拿起飞机来回垂直上下，看看有没有错误的数据。

    .. image:: ../images/indoor_tfmini_detection.png



